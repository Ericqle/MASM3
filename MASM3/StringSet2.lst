Microsoft (R) Macro Assembler Version 6.14.8444		    04/19/18 23:09:44
StringSet2.asm						     Page 1 - 1


				;=====================================================================================
				; Author: 		Sabrina Dang
				; Assignment:	StringSet2 (MASM3)
				; Class:		CS3B
				; Date:			April 19, 2018
				; Description:	
				;	This file contains the original implementaions of the second assigned
				;	set of string functions
				;=====================================================================================
					include ..\Irvine\Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
					memoryallocBailey proto near32 stdcall, dsize:dword
					
					extern String_length@0:proc
 = String_length@0			String_length equ String_length@0
					
 00000000				.data
					
 00000000				.code
				;== String_indexOf_1================================
				; 
				;===================================================
 00000000			String_indexOf_1 proc
 = [ebp + 12]				ptrString equ [ebp + 12]	;get address of string
 = [ebp + 8]				char equ [ebp + 8]			;get char
					
 00000000  55				push ebp		;push ebp onto the stack
 00000001  8B EC			mov ebp, esp	;move the stack pointer to the base pointer
					
 00000003  56				push esi		;push esi onto the stack
 00000004  53				push ebx		;push ebx onto the stack
					
 00000005  8B 75 0C			mov esi, ptrString	;move the start of ptrString into esi
 00000008  B8 00000000			mov eax, 0			;move 0 into eax
					
 0000000D			nextChar:
 0000000D  8A 1E			mov bl, [esi] 		;compare the string element to the character
 0000000F  8A 7D 08			mov bh, char		;move char into bh
 00000012  80 FB 00			cmp bl, 0			;compare the bl to 0 (null terminator)
 00000015  75 02			jne compare			;if not equal, jump to compare
 00000017  EB 08			jmp endProc			;else, jump to endProc
					
 00000019			compare:
 00000019  46				inc esi			;increment esi
 0000001A  38 DF			cmp bh, bl		;compare the character to the string
 0000001C  74 03			je endProc		;if the character and string are the same, jump to endProc
 0000001E  40				inc eax			;increment eax
 0000001F  EB EC			jmp nextChar	;jump to the nextChar
					

 00000021			endProc:
 00000021  5B				pop ebx 	;pop ebx off the stack
 00000022  5E				pop esi 	;pop esi off the stack
 00000023  5D				pop ebp		;pop ebp off the stack
 00000024  C3				ret
 00000025			String_indexOf_1 endp

				;== String_indexOf_2================================
				; 
				;===================================================
 00000025			String_indexOf_2 proc
 = [ebp + 16]				ptrString equ [ebp + 16]
 = [ebp + 12]				char equ [ebp + 12]		
 = [ebp + 8]				index equ [ebp + 8]			
					
 00000025  55				push ebp
 00000026  8B EC			mov ebp, esp
					
 00000028  56				push esi
 00000029  53				push ebx
 0000002A  51				push ecx
					
 0000002B  8B 75 10			mov esi, ptrString
 0000002E  8B 4D 08			mov ecx, index
 00000031  8B C1			mov eax, ecx

 00000033			nextChar:
 00000033  8A 1C 31			mov bl, [esi + ecx] 
 00000036  8A 7D 0C			mov bh, char
 00000039  80 FB 00			cmp bl, 0
 0000003C  75 02			jne compare
 0000003E  EB 08			jmp endProc
					
 00000040			compare:
 00000040  46				inc esi
 00000041  38 DF			cmp bh, bl
 00000043  74 03			je endProc
 00000045  40				inc eax
 00000046  EB EB			jmp nextChar
					

 00000048			endProc:
 00000048  59				pop ecx
 00000049  5B				pop ebx 
 0000004A  5E				pop esi 
 0000004B  5D				pop ebp
 0000004C  C3				ret
 0000004D			String_indexOf_2 endp

				;== String_indexOf_3================================
				; 
				;===================================================
 0000004D			String_indexOf_3 proc
 = [ebp + 12]				ptrString1 equ [ebp + 12]	
 = [ebp + 8]				ptrString2 equ [ebp + 8]
					
 0000004D  55				push ebp
 0000004E  8B EC			mov ebp, esp
					
 00000050  56				push esi
 00000051  57				push edi
 00000052  53				push ebx
 00000053  51				push ecx
 00000054  52				push edx
					
 00000055  B8 00000000			mov eax, 0
 0000005A  8B 75 0C			mov esi, ptrString1
 0000005D  8B 7D 08			mov edi, ptrString2

 00000060			nextChar:
 00000060  8A 3E			mov bh, [esi] 
 00000062  8A 1F			mov bl, [edi]
 00000064  80 FF 00			cmp bh, 0
 00000067  75 02			jne compare
 00000069  EB 21			jmp endProc
					
 0000006B			compare:
 0000006B  38 DF			cmp bh, bl
 0000006D  74 04			je strequal
 0000006F  40				inc eax
 00000070  46				inc esi
 00000071  EB ED			jmp nextChar

 00000073			strequal:
 00000073  8B CE			mov ecx, esi
 00000075  8B D7			mov edx, edi
					
 00000077			nextChar2:
 00000077  8A 39			mov bh, [ecx]
 00000079  8A 1A			mov bl, [edx]
 0000007B  80 FB 00			cmp bl, 0
 0000007E  75 03			jne compare2
 00000080  46				inc esi
 00000081  EB 09			jmp endProc
					
 00000083			compare2:
 00000083  41				inc ecx
 00000084  42				inc edx
 00000085  38 DF			cmp bh, bl
 00000087  74 EE			je nextChar2
 00000089  46				inc esi
 0000008A  EB D4			jmp nextChar
					
 0000008C			endProc:
 0000008C  5A				pop edx
 0000008D  59				pop ecx
 0000008E  5B				pop ebx 
 0000008F  5F				pop edi
 00000090  5E				pop esi 
 00000091  5D				pop ebp
 00000092  C3				ret
 00000093			String_indexOf_3 endp

				;== String_lastIndexOf_1============================
				; 
				;===================================================
 00000093			String_lastIndexOf_1 proc
 = [ebp + 12]				ptrString equ [ebp + 12]	;get address of string
 = [ebp + 8]				char equ [ebp + 8]		;get char
					
 00000093  55				push ebp
 00000094  8B EC			mov ebp, esp
					
 00000096  56				push esi
 00000097  53				push ebx
					
 00000098  8B 75 0C			mov esi, ptrString
					
 0000009B  56				push esi
 0000009C  E8 00000000 E		call String_length
 000000A1  83 C4 04			add esp, 4
 000000A4  8B C8			mov ecx, eax
					
					
 000000A6			nextChar:
 000000A6  8A 3C 31			mov bh, [esi + ecx] 
 000000A9  8A 5D 08			mov bl, char
 000000AC  83 F9 00			cmp ecx, 0
 000000AF  75 02			jne compare
 000000B1  EB 08			jmp endProc
					
 000000B3			compare:
 000000B3  49				dec ecx
 000000B4  38 DF			cmp bh, bl
 000000B6  74 03			je endProc
 000000B8  48				dec eax
 000000B9  EB EB			jmp nextChar
					

 000000BB			endProc:
 000000BB  5B				pop ebx 
 000000BC  5E				pop esi 
 000000BD  5D				pop ebp
 000000BE  C3				ret
 000000BF			String_lastIndexOf_1 endp

				;== String_lastIndexOf_2============================
				; 
				;===================================================
 000000BF			String_lastIndexOf_2 proc
 = [ebp + 16]				ptrString equ [ebp + 16]	
 = [ebp + 12]				char equ [ebp + 12]
 = [ebp + 8]				index equ [ebp + 8]
					
 000000BF  55				push ebp
 000000C0  8B EC			mov ebp, esp
					
 000000C2  56				push esi
 000000C3  53				push ebx
 000000C4  51				push ecx
					
 000000C5  8B 75 10			mov esi, ptrString
 000000C8  8B 4D 08			mov ecx, index

 000000CB  8B C1			mov eax, ecx
					
 000000CD			nextChar:
 000000CD  8A 3C 31			mov bh, [esi + ecx] 
 000000D0  8A 5D 0C			mov bl, char
 000000D3  83 F9 00			cmp ecx, 0
 000000D6  75 02			jne compare
 000000D8  EB 08			jmp endProc
					
 000000DA			compare:
 000000DA  49				dec ecx
 000000DB  38 DF			cmp bh, bl
 000000DD  74 03			je endProc
 000000DF  48				dec eax
 000000E0  EB EB			jmp nextChar
					

 000000E2			endProc:
 000000E2  59				pop ecx
 000000E3  5B				pop ebx 
 000000E4  5E				pop esi 
 000000E5  5D				pop ebp
 000000E6  C3				ret
 000000E7			String_lastIndexOf_2 endp

				;== String_lastIndexOf_3============================
				; 
				;===================================================
 000000E7			String_lastIndexOf_3 proc
 = [ebp + 12]				ptrString   EQU [ebp + 12]    
 = [ebp + 8]				subString EQU [ebp + 8]    

 000000E7  55				push ebp               
 000000E8  8B EC			mov ebp,esp            
				  
 000000EA  83 EC 0C		    sub esp, 12             
 = [ebp - 4]				strLength1 EQU [ebp - 4]     
 = [ebp - 8]				strLength2 EQU [ebp - 8]    
 = [ebp - 12]				found_index EQU [ebp - 12]

 000000ED  FF 75 0C		    push ptrString            
 000000F0  E8 00000000 E	    call String_length       
 000000F5  83 C4 04		    add esp, 4             
				    
 000000F8  83 C0 01		    add eax, 1              
 000000FB  89 45 FC		    mov strLength1, eax     
				    
				    
 000000FE  FF 75 08		    push subString         
 00000101  E8 00000000 E	    call String_length       
 00000106  83 C4 04		    add esp, 4            
				    
 00000109  89 45 F8		    mov strLength2, eax     
				    
 0000010C  8B 45 FC		    mov eax, strLength1     
 0000010F  2B 45 F8		    sub eax, strLength2      
 00000112  89 45 FC		    mov strLength1, eax      
				    
 00000115  B9 00000000		    mov ecx, 0            
 0000011A  B8 00000000		    mov eax, 0              
 0000011F  89 45 F4		    mov found_index, eax   
				    
 00000122			nextStart:   
 00000122  3B 4D FC		    cmp ecx, strLength1     
 00000125  7F 21		    jg endProc                 
 00000127  83 F8 01		    cmp eax , 1            
 0000012A  74 12		    je continue                
				    
 0000012C  FF 75 0C		    push ptrString            
 0000012F  FF 75 08		    push subString          
 00000132  51			    push ecx                
 00000133  E8 000000DA		    call startsWith       
 00000138  83 C4 0C		    add esp, 12            
				    
 0000013B  41			    inc ecx               
				    
 0000013C  EB E4		    jmp nextStart            
				    
 0000013E			continue:
 0000013E  89 4D F4		    mov found_index, ecx   
 00000141  B8 00000000		    mov eax, 0             
 00000146  EB DA		    jmp nextStart             
				    
 00000148			endProc:
				    
 00000148  8B 45 F4		    mov eax, found_index    
 0000014B  83 E8 01		    sub eax, 1             
				    
 0000014E  83 C4 0C		    add esp, 12            
 00000151  5D			    pop ebp                
				    
 00000152  C3			    ret
 00000153			String_lastIndexOf_3 endp


				;== String_toLowerCase============================
				; 
				;=================================================

 00000153				String_toLowerCase proc
 = [ebp + 8]				ptrString equ [ebp + 8]
					
 00000153  55				push ebp		;push the base pointer
 00000154  8B EC			mov	 ebp, esp	;move the stack pointer to the base pointer
					
 00000156  56				push esi
 00000157  53				push ebx
					
 00000158  8B 75 08			mov esi, ptrString	;move the start of the address into esi

					
 0000015B			compare:
 0000015B  8A 1E			mov bl, [esi]		;stores start of string address
					
 0000015D  80 FB 00			cmp bl, 0			;compare first element to 0
 00000160  74 12			je endProc			;if equal exit
					
 00000162  80 FB 41			cmp bl, 'A'			;compare the address ptr to 'a'
 00000165  72 08			jb	toLower			;if greater, jump to toLower
						
 00000167  80 FB 5A			cmp bl, 'Z'			;compare the address ptr to 'z'
 0000016A  77 03			ja	toLower			;if less, jump to toLower
					
 0000016C  80 C3 20			add bl, 32
					
					
 0000016F			toLower:
 0000016F  88 1E			mov [esi], bl		;store the value into eax
 00000171  46				inc esi			;inc ecx to traverse string
					
					
 00000172  EB E7			jmp compare		;jump to compare to repeat steps


 00000174			endProc:		;Pop all registers
 00000174  8B 45 08			mov eax, ptrString
					
 00000177  5B				pop ebx
 00000178  5E				pop esi
 00000179  5D				pop ebp
 0000017A  C3				ret



 0000017B			String_toLowerCase endp


				;== String_toUpperCase============================
				; 
				;=================================================
 0000017B			String_toUpperCase proc

 = [ebp + 8]				ptrString equ [ebp + 8]
					
 0000017B  55				push ebp		;push the base pointer
 0000017C  8B EC			mov	 ebp, esp	;move the stack pointer to the base pointer
					
 0000017E  56				push esi
 0000017F  53				push ebx
					
 00000180  8B 75 08			mov esi, ptrString	;move the start of the address into esi

 00000183			compare:
 00000183  8A 1E			mov bl, [esi]		;stores start of string address
					
 00000185  80 FB 00			cmp bl, 0			;compare first element to 0
 00000188  74 12			je endProc			;if equal exit
					
 0000018A  80 FB 61			cmp bl, 'a'			;compare the address ptr to 'a'
 0000018D  72 08			jb	toUpper			;if greater, jump to toUpper
						
 0000018F  80 FB 7A			cmp bl, 'z'			;compare the address ptr to 'z'
 00000192  77 03			ja	toUpper			;if less, jump to toUpper
					
 00000194  80 EB 20			sub bl, 32
					
 00000197			toUpper:
 00000197  88 1E			mov [esi], bl		;store the value into eax
 00000199  46				inc esi			;inc ecx to traverse string
					
					
 0000019A  EB E7			jmp compare		;jump to compare to repeat steps


 0000019C			endProc:		;Pop all registers
 0000019C  8B 45 08			mov eax, ptrString
					
 0000019F  5B				pop ebx
 000001A0  5E				pop esi
 000001A1  5D				pop ebp
 000001A2  C3				ret

 000001A3			String_toUpperCase endp

				;== String_replace ===============================
				; 
				;=================================================
 000001A3			String_replace proc
 = [ebp + 16]				ptrString equ [ebp + 16]	
 = [ebp + 12]				char1 equ [ebp + 12]
 = [ebp + 8]				char2 equ [ebp + 8]
					
 000001A3  55				push ebp
 000001A4  8B EC			mov ebp, esp
					
 000001A6  56				push esi
 000001A7  53				push ebx
 000001A8  52				push edx
 000001A9  57				push edi
					
 000001AA  8B 75 10			mov esi, ptrString
 000001AD  8A 7D 0C			mov bh, char1
 000001B0  8A 5D 08			mov bl, char2
					
 000001B3			nextChar:
 000001B3  8A 16			mov dl, [esi] 
 000001B5  80 FA 00			cmp dl, 0
 000001B8  75 02			jne compare
 000001BA  EB 0C			jmp endProc
					
 000001BC			compare:
 000001BC  3A 3E			cmp bh, [esi]
 000001BE  74 03			je change
 000001C0  46				inc esi
 000001C1  EB F0			jmp nextChar

 000001C3			change: 
 000001C3  88 1E			mov [esi], bl
 000001C5  46				inc esi
 000001C6  EB EB			jmp nextChar
					
 000001C8			endProc:
 000001C8  8B 45 10			mov eax, ptrString
 000001CB  5F				pop edi
 000001CC  5A				pop edx
 000001CD  5B				pop ebx
 000001CE  5E				pop esi 
 000001CF  5D				pop ebp
 000001D0  C3				ret
 000001D1			String_replace endp

				;== String_concat ================================
				; 
				;=================================================
 000001D1			String_concat proc				
 = [ebp + 12]				ptrString1 equ [ebp + 12]
 = [ebp + 8]				ptrString2 equ [ebp + 8]
					
 000001D1  55				push ebp					
 000001D2  8B EC			mov ebp, esp
					
 000001D4  56				push esi
 000001D5  57				push edi
 000001D6  52				push edx
 000001D7  53				push ebx
					
 000001D8  8B 75 0C			mov esi, ptrString1
 000001DB  8B 55 08			mov edx, ptrString2
					
					invoke memoryallocBailey, 1000
 000001E8  8B F8			mov edi, eax
					
 000001EA			nextChar:
 000001EA  8A 3E			mov bh, [esi]
 000001EC  8A 1F			mov bl, [edi]
 000001EE  80 FF 00			cmp bh, 0
 000001F1  75 02			jne copy
 000001F3  EB 06			jmp nextChar2

 000001F5			copy:
 000001F5  88 3F			mov [edi], bh
 000001F7  46				inc esi
 000001F8  47				inc edi
 000001F9  EB EF			jmp nextChar
					
 000001FB			nextChar2:
 000001FB  8A 3A			mov bh, [edx]
 000001FD  8A 1F			mov bl, [edi]
 000001FF  80 FF 00			cmp bh, 0
 00000202  75 02			jne copy2
 00000204  EB 06			jmp endProc

 00000206			copy2:
 00000206  88 3F			mov [edi], bh
 00000208  42				inc edx
 00000209  47				inc edi
 0000020A  EB EF			jmp nextChar2
					
 0000020C			endProc:
 0000020C  5B				pop ebx
 0000020D  5A				pop edx
 0000020E  5F				pop edi
 0000020F  5E				pop esi
 00000210  5D				pop ebp
 00000211  C3				ret
 00000212			String_concat endp

				;== HelperFunction ===============================
				; For String_lastIndexOf_3
				;=================================================
 00000212			startsWith proc
 = [ebp + 16]			    ptrString   equ [ebp + 16]         
 = [ebp + 12]			    strprefix   equ [ebp + 12]      
 = [ebp + 8]			    index       equ [ebp + 8]     
				    
 00000212  55				push ebp                       
 00000213  8B EC		    mov ebp, esp                   
				    
 00000215  53			    push ebx                       
 00000216  51			    push ecx                        
 00000217  56			    push esi                        
 00000218  57			    push edi                        
				    
 00000219  83 EC 04		    sub esp, 4                     
 = [ebp - 4]			    strlength1 equ [ebp - 4]    
				    
 0000021C  FF 75 0C		    push strprefix              
 0000021F  E8 00000000 E	    call String_length               
 00000224  83 C4 04		    add esp, 4                     
				    
 00000227  89 45 FC		    mov strLength1, eax             
				    
 0000022A  8B 75 10		    mov esi, ptrString               
 0000022D  03 75 08		    add esi, index                 
 00000230  8B 7D 0C		    mov edi, strprefix              
				    
 00000233  B8 00000001		    mov eax, 1                      
 00000238  8B 4D FC		    mov ecx, strLength1             
 0000023B			l1:                                
 0000023B  8A 3E		    mov bh, [esi]
 0000023D  8A 1F		    mov bl, [edi]                   
				    .if bh != bl || bh == 0       
 00000247  B8 00000000		        mov eax, 0                
 0000024C  EB 04		        jmp l2                    
				    .endif
 0000024E  46			    inc esi                    
 0000024F  47			    inc edi                       
 00000250  E2 E9		    loop l1                         
				    
 00000252  83 C4 04		l2: add esp, 4                    
				    
 00000255  5F			    pop edi                         
 00000256  5E			    pop esi                         
 00000257  59			    pop ecx                         
 00000258  5B			    pop ebx                         
				    
 00000259  5D			    pop ebp                        
 0000025A  C3			    ret                             
 0000025B			startsWith endp
				end


Microsoft (R) Macro Assembler Version 6.14.8444		    04/19/18 23:09:44
StringSet2.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	  00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000025B Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_concat  . . . . . . . . .	P Near	 000001D1 _TEXT	Length= 00000041 Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 000001EA _TEXT	
  copy . . . . . . . . . . . . .	L Near	 000001F5 _TEXT	
  nextChar2  . . . . . . . . . .	L Near	 000001FB _TEXT	
  copy2  . . . . . . . . . . . .	L Near	 00000206 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 0000020C _TEXT	
String_indexOf_1 . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000025 Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 0000000D _TEXT	
  compare  . . . . . . . . . . .	L Near	 00000019 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 00000021 _TEXT	
String_indexOf_2 . . . . . . . .	P Near	 00000025 _TEXT	Length= 00000028 Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 00000033 _TEXT	
  compare  . . . . . . . . . . .	L Near	 00000040 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 00000048 _TEXT	
String_indexOf_3 . . . . . . . .	P Near	 0000004D _TEXT	Length= 00000046 Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 00000060 _TEXT	
  compare  . . . . . . . . . . .	L Near	 0000006B _TEXT	
  strequal . . . . . . . . . . .	L Near	 00000073 _TEXT	
  nextChar2  . . . . . . . . . .	L Near	 00000077 _TEXT	
  compare2 . . . . . . . . . . .	L Near	 00000083 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 0000008C _TEXT	
String_lastIndexOf_1 . . . . . .	P Near	 00000093 _TEXT	Length= 0000002C Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 000000A6 _TEXT	
  compare  . . . . . . . . . . .	L Near	 000000B3 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 000000BB _TEXT	
String_lastIndexOf_2 . . . . . .	P Near	 000000BF _TEXT	Length= 00000028 Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 000000CD _TEXT	
  compare  . . . . . . . . . . .	L Near	 000000DA _TEXT	
  endProc  . . . . . . . . . . .	L Near	 000000E2 _TEXT	
String_lastIndexOf_3 . . . . . .	P Near	 000000E7 _TEXT	Length= 0000006C Public STDCALL
  nextStart  . . . . . . . . . .	L Near	 00000122 _TEXT	
  continue . . . . . . . . . . .	L Near	 0000013E _TEXT	
  endProc  . . . . . . . . . . .	L Near	 00000148 _TEXT	
String_replace . . . . . . . . .	P Near	 000001A3 _TEXT	Length= 0000002E Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 000001B3 _TEXT	
  compare  . . . . . . . . . . .	L Near	 000001BC _TEXT	
  change . . . . . . . . . . . .	L Near	 000001C3 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 000001C8 _TEXT	
String_toLowerCase . . . . . . .	P Near	 00000153 _TEXT	Length= 00000028 Public STDCALL
  compare  . . . . . . . . . . .	L Near	 0000015B _TEXT	
  toLower  . . . . . . . . . . .	L Near	 0000016F _TEXT	
  endProc  . . . . . . . . . . .	L Near	 00000174 _TEXT	
String_toUpperCase . . . . . . .	P Near	 0000017B _TEXT	Length= 00000028 Public STDCALL
  compare  . . . . . . . . . . .	L Near	 00000183 _TEXT	
  toUpper  . . . . . . . . . . .	L Near	 00000197 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 0000019C _TEXT	
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
memoryallocBailey  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
startsWith . . . . . . . . . . .	P Near	 00000212 _TEXT	Length= 00000049 Public STDCALL
  l1 . . . . . . . . . . . . . .	L Near	 0000023B _TEXT	
  l2 . . . . . . . . . . . . . .	L Near	 00000252 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
String_length@0  . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_length  . . . . . . . . .	Text   	 String_length@0
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
char1  . . . . . . . . . . . . .	Text   	 [ebp + 12]
char2  . . . . . . . . . . . . .	Text   	 [ebp + 8]
char . . . . . . . . . . . . . .	Text   	 [ebp + 12]
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
found_index  . . . . . . . . . .	Text   	 [ebp - 12]
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
index  . . . . . . . . . . . . .	Text   	 [ebp + 8]
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
ptrString1 . . . . . . . . . . .	Text   	 [ebp + 12]
ptrString2 . . . . . . . . . . .	Text   	 [ebp + 8]
ptrString  . . . . . . . . . . .	Text   	 [ebp + 16]
red  . . . . . . . . . . . . . .	Number	 00000004h   
strLength1 . . . . . . . . . . .	Text   	 [ebp - 4]
strLength2 . . . . . . . . . . .	Text   	 [ebp - 8]
strprefix  . . . . . . . . . . .	Text   	 [ebp + 12]
subString  . . . . . . . . . . .	Text   	 [ebp + 8]
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
