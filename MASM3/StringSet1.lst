Microsoft (R) Macro Assembler Version 6.14.8444		    04/19/18 23:09:44
StringSet1.asm						     Page 1 - 1


				;=====================================================================================
				; Author: 		Eric Le
				; Assignment:	StringSet1 (MASM3)
				; Class:		CS3B
				; Date:			April 19, 2018
				; Description:	
				;	This file contains the original implementaions of the first assigned
				;	set of string functions
				;=====================================================================================
					include ..\Irvine\Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
					memoryallocBailey proto near32 stdcall, dsize:dword
					
					extern String_length@0:proc
 = String_length@0			String_length equ String_length@0
					
 00000000				.data
					
 00000000				.code
				;== String_equals ==================================
				; Compare 2 strings and return a 1 in eax if true 
				; 	and 0 in eax if false
				;===================================================
 00000000			String_equals proc 				
 = [ebp + 12]				ptrString1 equ [ebp + 12]	;get address of string1
 = [ebp + 8]				ptrString2 equ [ebp + 8]	;get address of string2
					
					; push ebp ans save esp into ebp to use
 00000000  55				push ebp
 00000001  8B EC			mov ebp, esp
					
					; Push other registers to be used 
 00000003  53				push ebx
 00000004  52				push edx				
 00000005  56				push esi
 00000006  57				push edi 

					; Initialize to true ans mov string pointers
 00000007  B8 00000001			mov eax, 1
 0000000C  8B 75 0C			mov esi, ptrString1	
 0000000F  8B 7D 08			mov edi, ptrString2	
					
					; Segment checks for end of string by looking for null
 00000012			nextChar:
 00000012  8A 1E			mov bl, [esi]
 00000014  8A 17			mov dl, [edi]
 00000016  80 FB 00			cmp bl, 0
 00000019  75 07			jne compare	
 0000001B  80 FA 00			cmp dl, 0			
 0000001E  75 02			jne compare
 00000020  EB 0B			jmp endProc
					
					; Segment to compare two chars and loop back
 00000022			compare:
 00000022  46				inc esi	
 00000023  47				inc edi	
 00000024  38 D3			cmp bl, dl
 00000026  74 EA			je nextChar	
 00000028  B8 00000000			mov eax, 0

					; Pop all used registers and return
 0000002D			endProc:
 0000002D  5F				pop edi	
 0000002E  5E				pop esi	
 0000002F  5A				pop edx	
 00000030  5B				pop ebx	
					
 00000031  5D				pop ebp	
 00000032  C3				ret	
 00000033			String_equals endp

				;== String_equalsIgnoreCase ========================
				; Compare 2 strings and return a 1 in eax if true 
				; 	and 0 in eax if false, but ignores casing
				;===================================================
 00000033			String_equalsIgnoreCase proc
 = [ebp + 12]				ptrString1 equ [ebp + 12]	;get address of string1
 = [ebp + 8]				ptrString2 equ [ebp + 8]	;get address of string2
					
					; push ebp ans save esp into ebp to use
 00000033  55				push ebp
 00000034  8B EC			mov ebp, esp
					
					; Push other registers to be used
 00000036  53				push ebx
 00000037  52				push edx
 00000038  56				push esi
 00000039  57				push edi

					; Initialize to true ans mov string pointers
 0000003A  B8 00000001			mov eax, 1
 0000003F  8B 75 0C			mov esi, ptrString1	
 00000042  8B 7D 08			mov edi, ptrString2	
					
					; Segment to check for end of string
 00000045			nextChar:
 00000045  8A 1E			mov bl, [esi]
 00000047  8A 17			mov dl, [edi]
 00000049  80 FB 00			cmp bl, 0
 0000004C  75 07			jne compare	
 0000004E  80 FA 00			cmp dl, 0
 00000051  75 02			jne compare	
 00000053  EB 25			jmp endProc	

					; Segment to check for casing and make uppercase
 00000055			compare:
 00000055  46				inc esi
 00000056  47				inc edi	
 00000057  80 FB 61			cmp bl, 'a'	;makes sure the char is within range of alphabet
 0000005A  72 08			jb cont	
 0000005C  80 FB 7A			cmp bl, 'z'	;makes sure the char is within range of alphabet
 0000005F  77 03			ja cont	
 00000061  80 EB 20			sub bl, 32	

					; Segment that deos the same but for other char
 00000064			cont:				
 00000064  80 FA 61			cmp dl, 'a'	;makes sure the char is within range of alphabet
 00000067  72 08			jb cont2		
 00000069  80 FA 7A			cmp dl, 'z'	;makes sure the char is within range of alphabet
 0000006C  77 03			ja cont2	
 0000006E  80 EA 20			sub dl, 32
					
					; Segment to check if chars are equal
 00000071			cont2:			
 00000071  38 D3			cmp bl, dl				
 00000073  74 D0			je nextChar					
 00000075  B8 00000000			mov eax, 0	

					; Pop all used registers and return
 0000007A			endProc:		
 0000007A  5F				pop edi	
 0000007B  5E				pop esi	
 0000007C  5A				pop edx	
 0000007D  5B				pop ebx	
					
 0000007E  5D				pop ebp						
 0000007F  C3				ret	
 00000080			String_equalsIgnoreCase endp

				;== String_copy ====================================
				; Allocates new memory for a string and copies the
				;	source sting contents into the newly created
				;	string
				;===================================================
 00000080			String_copy proc
 = [ebp + 8]				ptrString equ [ebp + 8]		;get address of the string
					
					; push ebp ans save esp into ebp to use
 00000080  55				push ebp
 00000081  8B EC			mov ebp, esp
					
					; Push other registers to be used
 00000083  56				push esi
 00000084  57				push edi
 00000085  53				push ebx
					
					; Copy ptrString into esi
 00000086  8B 75 08			mov esi, ptrString
					
					; Allocate new memory for the new string
					invoke memoryallocBailey, 1000
 00000093  8B F8			mov edi, eax	;new strings value is now in edi and eax
					
					; Segment to check for end of string for source
 00000095			nextChar:
 00000095  8A 3E			mov bh, [esi]
 00000097  8A 1F			mov bl, [edi]
 00000099  80 FF 00			cmp bh, 0
 0000009C  75 02			jne copy
 0000009E  EB 06			jmp endProc

					; Segment to copy contents into the new string and move
					;  to the next char
 000000A0			copy:
 000000A0  88 3F			mov [edi], bh
 000000A2  46				inc esi
 000000A3  47				inc edi
 000000A4  EB EF			jmp nextChar
					
					; Pop all used registers and return
 000000A6			endProc:
 000000A6  5B				pop ebx
 000000A7  5F				pop edi
 000000A8  5E				pop esi
 000000A9  5D				pop ebp
 000000AA  C3				ret
 000000AB			String_copy endp

				;== String_substring_1 =============================
				; Allocate memory for a new string and copy the 
				;	contets of a source string into it based off 
				;	given indices
				;===================================================
 000000AB			String_substring_1 proc	
 = [ebp + 16]				ptrString equ [ebp + 16]	; address of string1
 = [ebp + 12]				beginIndex equ [ebp + 12]	; beginning index
 = [ebp + 8]				endIndex equ [ebp + 8]		; ending index
					
					; push ebp ans save esp into ebp to use
 000000AB  55				push ebp
 000000AC  8B EC			mov ebp, esp
					
					; Push other registers to be used
 000000AE  56				push esi
 000000AF  57				push edi
 000000B0  53				push ebx
 000000B1  51				push ecx
 000000B2  52				push edx
					
					; Copy ptrString into esi
 000000B3  8B 75 10			mov esi, ptrString
					
					; Allocate new momory for new string
					invoke memoryallocBailey, 1000
 000000C0  8B F8			mov edi, eax	;new strings address in edi and eax
					
					; Save indices
 000000C2  8B 55 0C			mov edx, beginIndex
 000000C5  8B 4D 08			mov ecx, endIndex
					
					; Check if endi index is less that beginning index
 000000C8  3B D1			cmp edx, ecx
 000000CA  7E 18			jle continue
 000000CC  EB 2D			jmp endProc
					
					; Check if the index is less than 0
 000000CE  83 FA 00			cmp edx, 0
 000000D1  7D 11			jge continue
 000000D3  EB 26			jmp endProc
					
					; Get String Length of string1
 000000D5  56				push esi
 000000D6  E8 00000000 E		call String_length
 000000DB  83 C4 04			add esp, 4
					
					; Check if the index is greater than the length
 000000DE  3B C8			cmp ecx, eax
 000000E0  7C 02			jl continue
 000000E2  EB 17			jmp endProc

					; resave new string address and set a count to copy
 000000E4			continue:
 000000E4  8B C7			mov eax, edi
 000000E6  2B CA			sub ecx, edx
					
					; Segment to get current chars and check count for 0
 000000E8			nextChar:
 000000E8  8A 3C 32			mov bh, [esi + edx]
 000000EB  8A 1F			mov bl, [edi]
 000000ED  83 F9 00			cmp ecx, 0
 000000F0  7D 02			jge copy
 000000F2  EB 07			jmp endProc

					; Segment to copy the contents
 000000F4			copy:
 000000F4  88 3F			mov [edi], bh
 000000F6  49				dec ecx
 000000F7  46				inc esi
 000000F8  47				inc edi
 000000F9  EB ED			jmp nextChar
					
					; Pop all used registers and return
 000000FB			endProc:
 000000FB  5A				pop edx
 000000FC  59				pop ecx
 000000FD  5B				pop ebx
 000000FE  5F				pop edi
 000000FF  5E				pop esi
 00000100  5D				pop ebp
 00000101  C3				ret
 00000102			String_substring_1 endp

				;== String_substring_2 =============================
				; Allocate memory for a new string and copy the 
				;	contets of a source string into it based off 
				;	given starting index
				;===================================================
 00000102			String_substring_2 proc	
 = [ebp + 12]				ptrString equ [ebp + 12] ;string1
 = [ebp + 8]				beginIndex equ [ebp + 8] ;start index
					
					; Push ebp ans save esp into ebp to use
 00000102  55				push ebp
 00000103  8B EC			mov ebp, esp
					
					; Push other registers to be used
 00000105  56				push esi
 00000106  57				push edi
 00000107  53				push ebx
 00000108  51				push ecx
					
					; Allocate new memory for new string 
					invoke memoryallocBailey, 1000
 00000113  8B F8			mov edi, eax
					
					; Save string1 pointer and index into registers
 00000115  8B 75 0C			mov esi, ptrString
 00000118  8B 4D 08			mov ecx, beginIndex
					
					; Check if beginning index is less than 0
 0000011B  83 F9 00			cmp ecx, 0
 0000011E  7D 13			jge nextChar
 00000120  EB 23			jmp endProc
					
					; Get string length
 00000122  56				push esi
 00000123  E8 00000000 E		call String_length
 00000128  83 C4 04			add esp, 4
					
					; Check if Length is less thatn index
 0000012B  3B C8			cmp ecx, eax
 0000012D  8B C7			mov eax, edi
 0000012F  7C 02			jl nextChar
 00000131  EB 12			jmp endProc
					
					; Segment to check for end of string for source string
 00000133			nextChar:
 00000133  8A 3C 31			mov bh, [esi + ecx]
 00000136  8A 1F			mov bl, [edi]
 00000138  80 FF 00			cmp bh, 0
 0000013B  7D 02			jge copy
 0000013D  EB 06			jmp endProc
					
					; Segment to copy contents
 0000013F			copy:
 0000013F  88 3F			mov [edi], bh
 00000141  46				inc esi
 00000142  47				inc edi
 00000143  EB EE			jmp nextChar
					
					; Pop all used registers and return
 00000145			endProc:
 00000145  59				pop ecx
 00000146  5B				pop ebx
 00000147  5F				pop edi
 00000148  5E				pop esi
 00000149  5D				pop ebp
 0000014A  C3				ret
 0000014B			String_substring_2 endp

				;== String_charAt ==================================
				; Return a character of a string at a specified 
				;	index
				;===================================================
 0000014B			String_charAt proc
 = [ebp + 12]				ptrString equ [ebp + 12]
 = [ebp + 8]				index equ[ebp + 8]
					
					; push ebp ans save esp into ebp to use
 0000014B  55				push ebp
 0000014C  8B EC			mov ebp, esp
					
					; Push other registers to be used
 0000014E  56				push esi
 0000014F  51				push ecx
 00000150  52				push edx
					
					; Set registers 
 00000151  BA 00000030			mov edx, '0'
 00000156  8B 75 0C			mov esi, ptrString
 00000159  8B 4D 08			mov ecx, index
 0000015C  83 C1 01			add ecx, 1	; must be incremented

					; Get string length
 0000015F  FF 75 0C			push ptrString
 00000162  E8 00000000 E		call String_length
 00000167  83 C4 04			add esp, 4
					
					; Check if the index is greater than the lenght 
 0000016A  3B C1			cmp eax, ecx
 0000016C  7C 10			jl endProc
					
					; Check if the index is less than 0
 0000016E  83 F9 00			cmp ecx, 0
 00000171  7C 0B			jl endProc
					
					; Segment to check for count of 0 and save current char
 00000173			beginWhile:
 00000173  83 F9 00			cmp ecx, 0
 00000176  74 06			je endProc
 00000178  8A 16			mov dl, byte ptr [esi]
 0000017A  46				inc esi
 0000017B  49				dec ecx
 0000017C  EB F5			jmp beginWhile
					
					; Resave eax and pop all used registers and return
 0000017E			endProc:
 0000017E  8B C2			mov eax, edx
					
 00000180  5A				pop edx
 00000181  59				pop ecx
 00000182  5E				pop esi
 00000183  5D				pop ebp
 00000184  C3				ret
 00000185			String_charAt endp

				;== String_startsWith_1 ============================
				; Return true if the string contains a substring 
				;	starting at a specified index
				;===================================================
 00000185			String_startsWith_1 proc
 = [ebp + 16]				ptrString equ [ebp + 16]
 = [ebp + 12]				ptrSubString equ [ebp + 12]
 = [ebp + 8]				index equ[ebp + 8]
					
					; push ebp ans save esp into ebp to use
 00000185  55				push ebp
 00000186  8B EC			mov ebp, esp
					
					; Push other registers to be used
 00000188  56				push esi
 00000189  57				push edi
 0000018A  51				push ecx
 0000018B  53				push ebx
					
					; Set registers
 0000018C  B8 00000001			mov eax, 1
 00000191  8B 75 10			mov esi, ptrString
 00000194  8B 7D 0C			mov edi, ptrSubString
 00000197  8B 4D 08			mov ecx, index
					
					; Check for end of sting
 0000019A			nextChar:
 0000019A  8A 3C 31			mov bh, [esi + ecx]
 0000019D  8A 1F			mov bl, [edi]
 0000019F  80 FB 00			cmp bl, 0
 000001A2  75 02			jne compare
 000001A4  EB 0B			jmp endProc

					; Compare the chars and prep for next char
 000001A6			compare:
 000001A6  46				inc esi
 000001A7  47				inc edi
 000001A8  38 FB			cmp bl, bh
 000001AA  74 EE			je nextChar
 000001AC  B8 00000000			mov eax, 0
					
					; Pop all used registers and return
 000001B1			endProc:
 000001B1  5B				pop ebx
 000001B2  59				pop ecx
 000001B3  5F				pop edi
 000001B4  5E				pop esi
 000001B5  5D				pop ebp
 000001B6  C3				ret
 000001B7			String_startsWith_1 endp

				;== String_startsWith_2 ============================
				; Return true if the string contains a substring 
				;	starting at a index 0
				;===================================================
 000001B7			String_startsWith_2 proc
 = [ebp + 12]				ptrString equ [ebp + 12]
 = [ebp + 8]				ptrSubString equ [ebp + 8]
					
					; push ebp ans save esp into ebp to use
 000001B7  55				push ebp
 000001B8  8B EC			mov ebp, esp
					
					; Push other registers to be used
 000001BA  56				push esi
 000001BB  57				push edi
 000001BC  53				push ebx
					
					; Set registers
 000001BD  B8 00000001			mov eax, 1
 000001C2  8B 75 0C			mov esi, ptrString
 000001C5  8B 7D 08			mov edi, ptrSubString
					
					; Check for end of string
 000001C8			nextChar:
 000001C8  8A 3E			mov bh, [esi]
 000001CA  8A 1F			mov bl, [edi]
 000001CC  80 FB 00			cmp bl, 0
 000001CF  75 02			jne compare
 000001D1  EB 0B			jmp endProc

					; Compare the chars and prep next char
 000001D3			compare:
 000001D3  46				inc esi
 000001D4  47				inc edi
 000001D5  38 FB			cmp bl, bh
 000001D7  74 EF			je nextChar
 000001D9  B8 00000000			mov eax, 0
					
					; Pop all used registers and return
 000001DE			endProc:
 000001DE  5B				pop ebx
 000001DF  5F				pop edi
 000001E0  5E				pop esi
 000001E1  5D				pop ebp
 000001E2  C3				ret
 000001E3			String_startsWith_2 endp

				;== String_endsWith ================================
				; Returns true if the string ends with a given 
				;	substring 
				;===================================================
 000001E3			String_endsWith proc
 = [ebp + 12]				ptrString equ [ebp + 12]
 = [ebp+ 8]				ptrSubString equ [ebp+ 8]
					
					; push ebp ans save esp into ebp to use
 000001E3  55				push ebp
 000001E4  8B EC			mov ebp, esp
					
					; Push other registers to be used
 000001E6  53				push ebx
 000001E7  51				push ecx
 000001E8  52				push edx
 000001E9  56				push esi
 000001EA  57				push edi
					
					; Set pointers registers
 000001EB  8B 75 0C			mov esi, ptrString
 000001EE  8B 7D 08			mov edi, ptrSubString	
					
					; Get string lenght and dec by 1 to get max index
 000001F1  56				push esi
 000001F2  E8 00000000 E		call String_length
 000001F7  83 C4 04			add esp, 4
 000001FA  8B C8			mov ecx, eax
 000001FC  49				dec ecx
					
					; Get substring length and get its max index
 000001FD  57				push edi
 000001FE  E8 00000000 E		call String_length
 00000203  83 C4 04			add esp, 4
 00000206  8B D0			mov edx, eax
 00000208  4A				dec edx
					
					; Check if the index is greater than the length
 00000209  3B D1			cmp edx, ecx
 0000020B  7C 07			jl nextChar
 0000020D  B8 00000000			mov eax, 0
 00000212  EB 1D			jmp endProc
					
					; Get chars and check fo end of string
 00000214			nextChar:	
 00000214  B8 00000001			mov eax, 1
 00000219  8A 3C 31			mov bh, [esi + ecx]
 0000021C  8A 1C 3A			mov bl, [edi + edx]
 0000021F  83 FA 00			cmp edx, 0
 00000222  7D 02			jge compare
 00000224  EB 0B			jmp endProc

					; Compare and decrement for nex char
 00000226			compare:
 00000226  49				dec ecx
 00000227  4A				dec edx
 00000228  38 FB			cmp bl, bh
 0000022A  74 E8			je nextChar
 0000022C  B8 00000000			mov eax, 0

					; Pop all used registers and return
 00000231			endProc:	
 00000231  5F				pop edi
 00000232  5E				pop esi
 00000233  5A				pop edx
 00000234  59				pop ecx
 00000235  5B				pop ebx
 00000236  5D				pop ebp
 00000237  C3				ret
 00000238			String_endsWith endp
				 
				end




















Microsoft (R) Macro Assembler Version 6.14.8444		    04/19/18 23:09:44
StringSet1.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	  00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000238 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_charAt  . . . . . . . . .	P Near	 0000014B _TEXT	Length= 0000003A Public STDCALL
  beginWhile . . . . . . . . . .	L Near	 00000173 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 0000017E _TEXT	
String_copy  . . . . . . . . . .	P Near	 00000080 _TEXT	Length= 0000002B Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 00000095 _TEXT	
  copy . . . . . . . . . . . . .	L Near	 000000A0 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 000000A6 _TEXT	
String_endsWith  . . . . . . . .	P Near	 000001E3 _TEXT	Length= 00000055 Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 00000214 _TEXT	
  compare  . . . . . . . . . . .	L Near	 00000226 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 00000231 _TEXT	
String_equalsIgnoreCase  . . . .	P Near	 00000033 _TEXT	Length= 0000004D Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 00000045 _TEXT	
  compare  . . . . . . . . . . .	L Near	 00000055 _TEXT	
  cont . . . . . . . . . . . . .	L Near	 00000064 _TEXT	
  cont2  . . . . . . . . . . . .	L Near	 00000071 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 0000007A _TEXT	
String_equals  . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000033 Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 00000012 _TEXT	
  compare  . . . . . . . . . . .	L Near	 00000022 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 0000002D _TEXT	
String_startsWith_1  . . . . . .	P Near	 00000185 _TEXT	Length= 00000032 Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 0000019A _TEXT	
  compare  . . . . . . . . . . .	L Near	 000001A6 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 000001B1 _TEXT	
String_startsWith_2  . . . . . .	P Near	 000001B7 _TEXT	Length= 0000002C Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 000001C8 _TEXT	
  compare  . . . . . . . . . . .	L Near	 000001D3 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 000001DE _TEXT	
String_substring_1 . . . . . . .	P Near	 000000AB _TEXT	Length= 00000057 Public STDCALL
  continue . . . . . . . . . . .	L Near	 000000E4 _TEXT	
  nextChar . . . . . . . . . . .	L Near	 000000E8 _TEXT	
  copy . . . . . . . . . . . . .	L Near	 000000F4 _TEXT	
  endProc  . . . . . . . . . . .	L Near	 000000FB _TEXT	
String_substring_2 . . . . . . .	P Near	 00000102 _TEXT	Length= 00000049 Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 00000133 _TEXT	
  copy . . . . . . . . . . . . .	L Near	 0000013F _TEXT	
  endProc  . . . . . . . . . . .	L Near	 00000145 _TEXT	
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
memoryallocBailey  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
String_length@0  . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_length  . . . . . . . . .	Text   	 String_length@0
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
beginIndex . . . . . . . . . . .	Text   	 [ebp + 8]
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
endIndex . . . . . . . . . . . .	Text   	 [ebp + 8]
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
index  . . . . . . . . . . . . .	Text   	 [ebp + 8]
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
ptrString1 . . . . . . . . . . .	Text   	 [ebp + 12]
ptrString2 . . . . . . . . . . .	Text   	 [ebp + 8]
ptrString  . . . . . . . . . . .	Text   	 [ebp + 12]
ptrSubString . . . . . . . . . .	Text   	 [ebp+ 8]
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
